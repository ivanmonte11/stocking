generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                Int                @id @default(autoincrement())
  nombre            String
  createdAt         DateTime           @default(now())
  usuarios          User[]
  productos         Producto[]
  clientes          Cliente[]
  variantesProducto VarianteProducto[]
  transacciones     Transaccion[]
  ventas            Venta[]
  movimientosStock  MovimientoStock[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now()) @map("fecha_creacion")
  updatedAt DateTime @updatedAt @map("fecha_actualizacion")
  tenantId  Int
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  productos     Producto[]
  transacciones Transaccion[]     @relation("UsuarioTransacciones")
  movimientos   MovimientoStock[] @relation("UsuarioMovimientos")

  @@map("usuarios")
}

model Producto {
  id                 Int                @id @default(autoincrement())
  codigoBarra        String?            @unique
  nombre             String
  descripcion        String?
  precio             Float
  costo              Float
  categoria          String?
  fechaCreacion      DateTime           @default(now())
  fechaActualizacion DateTime           @updatedAt
  tenantId           Int
  tenant             Tenant             @relation(fields: [tenantId], references: [id])
  creadoPorId        Int?
  creadoPor          User?              @relation(fields: [creadoPorId], references: [id])
  variantes          VarianteProducto[]
  movimientos        MovimientoStock[]
}

model VarianteProducto {
  id          Int               @id @default(autoincrement())
  productoId  Int
  producto    Producto          @relation(fields: [productoId], references: [id])
  color       String?
  talla       String?
  stock       Int               @default(0)
  tenantId    Int
  tenant      Tenant            @relation(fields: [tenantId], references: [id])
  ventas      Venta[]
  movimientos MovimientoStock[]
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
}

enum TipoTransaccion {
  VENTA
  COMPRA
  AJUSTE
}

model MovimientoStock {
  id         Int      @id @default(autoincrement())
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id])

  varianteId Int
  variante   VarianteProducto @relation(fields: [varianteId], references: [id])

  cantidad       Int
  tipoMovimiento String   @map("tipoMovimiento")
  motivo         String?
  fecha          DateTime @default(now())

  usuarioId Int?
  usuario   User? @relation("UsuarioMovimientos", fields: [usuarioId], references: [id])

  transaccionId Int?
  transaccion   Transaccion? @relation(fields: [transaccionId], references: [id])

  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Cliente {
  id            Int           @id @default(autoincrement())
  nombre        String
  telefono      String?
  email         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ventas        Venta[]
  transacciones Transaccion[]
  tenantId      Int
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
}

model Venta {
  id             Int              @id @default(autoincrement())
  varianteId     Int
  variante       VarianteProducto @relation(fields: [varianteId], references: [id])
  clienteId      Int
  cliente        Cliente          @relation(fields: [clienteId], references: [id])
  cantidad       Int
  fecha          DateTime         @default(now())
  precioUnitario Float?           @map("precioUnitario")
  subtotal       Float?
  transaccionId  Int?
  transaccion    Transaccion?     @relation(fields: [transaccionId], references: [id])

  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Transaccion {
  id          Int               @id @default(autoincrement())
  tipo        TipoTransaccion
  clienteId   Int?
  cliente     Cliente?          @relation(fields: [clienteId], references: [id])
  fecha       DateTime          @default(now())
  usuarioId   Int?
  usuario     User?             @relation("UsuarioTransacciones", fields: [usuarioId], references: [id])
  total       Float
  ventas      Venta[]
  movimientos MovimientoStock[]
  tenantId    Int
  tenant      Tenant            @relation(fields: [tenantId], references: [id])
}
